#!/usr/bin/perl -w
package core;
use strict;
use CommonRoutines;
use Time::HiRes qw[gettimeofday];

BEGIN {
	$__plugin_name    = 'starburst';
	$__plugin_version = '2.0';
	$__plugin_author  = 'ezbake consortium';
	$__plugin_date    = 'under development';
};

$__plugin_handle  = core->new();

sub new {
       	my $self = shift;
       	$self = bless({}, $self);
       	for (my $x = 0; $x < $#_; $x += 2) {
               	$self->{$_[$x]} = $_[$x+1];
       	}
       	return($self);
}

sub initialize {
	my ($self) = @_;
	registry_write('core', $self);
	my $dir;
	foreach my $path (('commands', 'autoload')) {
		opendir($dir, registry_read('plugins.folder').'/'.$path);
		if (!$dir) {
			debug('Failed to get list of plugins: '.$!, 0);
			next
		}
		while (my $file = readdir($dir)) {
			next if ($file =~ /^(\.|\.\.)$/); # . and .. aren't plugins
			$file =~ s/\.plg$//;
			plugin_load($path.'.'.$file);
		}
		closedir($dir);
	}
	plugin_load(registry_read('backend.db'));
	plugin_load(registry_read('backend.irc'));
	if (!registry_read('backend.db.handle') || !registry_read('backend.irc.handle')) {
		debug('Failed to load a required plugin. Try enabling verbosity if there is no error message.', 0);
		exit;
	}
}

sub start {
	my ($self) = @_;
	registry_read('backend.db.handle')->start();
	registry_read('backend.irc.handle')->start();
	registry_read('backend.irc.handle')->client_new(registry_read('irc.nickname'),
							registry_read('irc.ident'),
							registry_read('irc.hostname'),
							registry_read('irc.realname'));
	registry_read('backend.irc.handle')->client_join(1, registry_read('irc.channel'));
}

sub run {
	my ($self) = @_;
	my $irc    = registry_read('backend.irc.handle');
	while (1) {
		my $buffer = $irc->readraw();
		debug($buffer, 5);
		for (my $x = 1; $x < 9; $x++) { # XXX: this is a nasty hack. figure out a good way to do this nicely.
			my @events = registry_tree_single('core.events.prio.'.$x);
			foreach my $event (@events) {
				my $event_start_time = join('.', gettimeofday);
				my $regex   = registry_read('core.events.prio.'.$x.'.'.$event.'.regex');
				my $matchon = registry_read('core.events.prio.'.$x.'.'.$event.'.matchon');
				my ($success, @returns) = $irc->do_match($buffer, $matchon, $regex);
				if ($success) {
					debug('Event \''.$event.'\' fired', 3);
					my $routine  = registry_read('core.events.prio.'.$x.'.'.$event.'.routine');
					my $runcount = registry_read('core.events.prio.'.$x.'.'.$event.'.runcount');
					&$routine(@returns);
					registry_write('core.events.prio.'.$x.'.'.$event.'.runcount', $runcount + 1);
					if (registry_read('starburst.profile_all') || registry_read('starburst.profile_events')) {
						my $event_end_time = join('.', gettimeofday);
						my $event_time     = abs($event_end_time - $event_start_time);
						registry_write('profile.events.averagetime', ((registry_read('profile.events.averagetime') + $event_time) / 2));
						if ($event_time > registry_read('profile.events.longest_time')) {
							registry_write('profile.events.longest_time', $event_time);
							registry_write('profile.events.longest_time_name', $event);
						}
						if (!registry_read('profile.events.shortest_time') || $event_time < registry_read('profile.events.shortest_time')) {
							registry_write('profile.events.shortest_time', $event_time);
							registry_write('profile.events.shortest_time_name', $event);
						}
					}
				}
			}
		}
	}
}

sub shutdown {
	debug('Reloading starburst.', 0);
	plugin_unload(registry_read('backend.db'));
	plugin_unload(registry_read('backend.irc'));
	undef(&new);
	undef(&initialize);
	undef(&start);
	undef(&event_insert);
	undef(&event_delete);
}

sub event_insert {
	my ($self, $prio, $event, $matchon, $regex, $routine) = @_;
	debug('Creating new event \''.$event.'\' matching on \''.$matchon.'\' priority '.$prio.'.', 1);
	debug('Event regex: '.$regex.'  --  Routine '.$routine, 2);
	registry_write('core.events.prio.'.$prio.'.'.$event.'.regex',    $regex);
	registry_write('core.events.prio.'.$prio.'.'.$event.'.routine',  $routine);
	registry_write('core.events.prio.'.$prio.'.'.$event.'.matchon',  $matchon);
	registry_write('core.events.prio.'.$prio.'.'.$event.'.runcount', 0);
}

sub event_delete {
	my ($self, $prio, $event) = @_;
	debug('Deleting event \''.$event.'\'.', 0);
	registry_deletetree('core.events.prio'.$prio.'.'.$event);
}

1;

